version: '3.4'

services:
#  db:
#    container_name: h2-container
#    image: oscarfonts/h2:latest
#    ports:
#      - 1521:1521
#      - 8081:81
#    environment:
#      H2_OPTIONS: -ifNotExists
#    volumes:
#      - ./h2/:/opt/h2-data
#    restart: always
#
#  redis:
#    image: redis:alpine
#    container_name: redis
#    hostname: redis
#    ports:
#      - "6379:6379"
#

#  concert-api:
#    image: concert-api
#    container_name: concert-api-container
#    environment: # spring app 설정
#      SPRING_DATASOURCE_URL: jdbc:h2:tcp://h2-container:1521/test;DATABASE_TO_UPPER=FALSE;DB_CLOSE_ON_EXIT=FALSE;INIT=CREATE SCHEMA IF NOT EXISTS test # h2 db url
#      SPRING_DATASOURCE_USERNAME: sa # h2 db id
#      SPRING_DATASOURCE_PASSWORD: # h2 db password
#      SPRING_JPA_HIBERNATE_DDL_AUTO: create # DDL 자동 생성
#    depends_on:
#      - db
#      - redis
#    build: .
#    ports:
#      - "8080:8080"

#
#  zookeeper: # 서비스 이름. service 하위에 작성하면 해당 이름으로 동작
#    image: wurstmeister/zookeeper # 도커 이미지
#    container_name: zookeeper
#    ports: # 외부포트:컨테이너내부포트
#      - "2181:2181"
#
#  kafka:
#    image: wurstmeister/kafka
#    container_name: kafka
#    ports: # 외부포트:컨테이너내부포트
#      - "9093:9093"
#    environment: # kafka 브로터를 위한 환경 변수 지정
##      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
##      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
##      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
#
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # kafka가 zookeeper에 커넥션하기 위한 대상을 지정
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    depends_on:
#      - zookeeper
#
  concert-consumer:
    image: concert-consumer
    container_name: concert-consumer-container
    environment: # spring app 설정
      SPRING_DATASOURCE_URL: jdbc:h2:tcp://h2-container:1521/test;DATABASE_TO_UPPER=FALSE;DB_CLOSE_ON_EXIT=FALSE # h2 db url
      SPRING_DATASOURCE_USERNAME: sa # h2 db id
      SPRING_DATASOURCE_PASSWORD: # h2 db password
      SPRING_JPA_HIBERNATE_DDL_AUTO: none # DDL 자동 생성
    build: ../ConcertConsumer/
    ports:
      - "8083:8083"
#    depends_on:
#      - db
#      - redis

#  controller:
#    image: ngrinder/controller:3.5.9
#    restart: always
#    ports:
#      - "9000:80"
#      - "16001:16001"
#      - "12000-12009:12000-12009"
#    volumes:
#      - ./ngrinder-controller:/opt/ngrinder-controller
#
#  agent:
#    image: ngrinder/agent:3.5.9
#    restart: always
#    links:
#      - controller


