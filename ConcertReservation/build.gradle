
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id("org.sonarqube") version "5.0.0.4638"
}

sonar {
	properties {
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", "squ_a3a0125e5d6b7f2239950881f59b0419df70d302"
		property "sonar.projectKey", "sonar-concert-project-key"
		property "sonar.projectName" , "sonar-concert-project-name"
		property "sonar.sources", "src"
		property "sonar.language", "java"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.profile", "Sonar way"
		property "sonar.java.binaries", "${buildDir}/classes"
		property "sonar.test.inclusions", "**/*Test.java"
		property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**"
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.11'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

group = 'com.example.hhplus'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '19'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.redisson:redisson-spring-boot-starter:3.23.3'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.kafka:spring-kafka'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	reports {
		// html로 report 생성하기
		// 빌드경로/jacoco/report.html 폴더 내부로 경로 설정
		html.destination file("$buildDir/jacoco/report.html")
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 커버리지 적용 여부
			element = 'CLASS' // 커버리지 적용 단위

			// 라인 커버리지 설정
			// 적용 대상 전체 소스 코드들을 한줄 한줄 따졌을 때 테스트 코드가 작성되어 있는 줄의 빈도
			// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 브랜치 커버리지 설정
			// if-else 등을 활용하여 발생되는 분기들 중 테스트 코드가 작성되어 있는 빈도
			// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 라인 최대 갯수 설정
			// 빈 줄을 제외하고 하나의 자바 파일에서 작성될 수 있는 최대 라인 갯수
			// 한 파일에 최대 500줄까지 작성되어야 함
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 500
			}
		}
	}
}

wrapper {
	gradleVersion = '7.6'
}
